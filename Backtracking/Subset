import java.util.ArrayList;
import java.util.List;

public class Solution {
    
    /**
     * This method generates all subsets (the power set) of the given array.
     * 
     * @param nums The input array of integers.
     * @return A list of all subsets of the input array.
     */
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>(); // Result list to store all subsets
        List<Integer> subset = new ArrayList<>();   // Temporary list to store the current subset
        dfs(nums, 0, subset, res);                  // Start the recursive DFS process
        return res;                                 // Return the list of all subsets
    }

    /**
     * A helper method that uses Depth-First Search (DFS) to generate subsets.
     * 
     * @param nums The input array of integers.
     * @param i The current index in the array.
     * @param subset The current subset being constructed.
     * @param res The result list storing all subsets.
     */
    private void dfs(int[] nums, int i, List<Integer> subset, List<List<Integer>> res) {
        // Base case: If we've processed all elements, add the current subset to the result
        if (i >= nums.length) {
            res.add(new ArrayList<>(subset)); // Add a copy of the current subset to avoid mutation
            return;
        }
        
        // Include nums[i] in the current subset and move to the next element
        subset.add(nums[i]);
        dfs(nums, i + 1, subset, res);
        
        // Backtrack: Remove nums[i] from the current subset and explore without including it
        subset.remove(subset.size() - 1);
        dfs(nums, i + 1, subset, res);
    }
}

/**
 * Time Complexity:
 * The time complexity is O(2^n), where n is the size of the input array `nums`.
 * This is because for each element in `nums`, we have two choices: include it in a subset or exclude it,
 * leading to a total of 2^n subsets.

 * Space Complexity:
 * The space complexity is O(n), where n is the size of `nums`. This is due to the recursion stack,
 * which can go as deep as `n` calls. Additionally, the `subset` list can hold at most `n` elements at any time.
 */
