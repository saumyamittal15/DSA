class Solution {
    public List<List<Integer>> permute(int[] nums) {
        // Initialize the result list to store all permutations
        List<List<Integer>> result = new ArrayList<>();
        // Temporary list to store a single permutation
        List<Integer> permutations = new ArrayList<>();
        // Boolean array to track which elements have been used
        boolean[] index = new boolean[nums.length];
        // Helper function to generate permutations
        permute(nums, result, permutations, index);
        return result;
    }

    private void permute(int[] nums, List<List<Integer>> result, List<Integer> permutations, boolean[] index) {
        // Base case: if the size of the current permutation equals the length of nums
        if (permutations.size() == nums.length) {
            // Add a copy of the current permutation to the result list
            result.add(new ArrayList<>(permutations));
            return;
        }

        // Iterate through each element in nums
        for (int i = 0; i < nums.length; i++) {
            // If the current element is not yet used in the current permutation
            if (!index[i]) {
                // Mark it as used
                index[i] = true;
                // Add it to the current permutation
                permutations.add(nums[i]);
                // Recurse to build further permutations
                permute(nums, result, permutations, index);
                // Backtrack: remove the last element and mark it as unused
                permutations.remove(permutations.size() - 1);
                index[i] = false;
            }
        }
    }
}

/*
Time Complexity:
- The time complexity of this algorithm is O(n * n!), where n is the length of the input array.
  - There are n! permutations in total.
  - For each permutation, we perform a linear operation (adding or removing elements), which takes O(n) time.

Space Complexity:
- The space complexity is O(n), where n is the length of the input array.
  - This includes:
    - The recursion stack, which can go up to a depth of n.
    - The `permutations` list that temporarily holds elements during recursion.
    - The `index` array that tracks used elements.
- The final result list (`result`) is not counted in space complexity analysis as it depends on output size.
*/
