class Solution {
    public String minWindow(String s, String t) {
        HashMap<Character, Integer> map = new HashMap<>();

        for (char x : t.toCharArray()) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        
        //Counts how many unique characters from t have been found in the current window.
        int matched = 0;

        //The starting index of the current window.
        int start = 0;

        //The minimum length of the substring found so far, initialized to a value larger than the maximum possible length of s
        int minLen = s.length() + 1;

        //The starting index of the smallest substring.
        int subStr = 0;
        for (int endWindow = 0; endWindow < s.length(); endWindow++) {
            char right = s.charAt(endWindow);
            if (map.containsKey(right)) {
                //If the character at endWindow is in the map, its count is decremented.
                map.put(right, map.get(right) - 1);

                //If the count reaches zero, it means we've found one complete instance of that character from t, so matched is incremented.
                if (map.get(right) == 0) matched++;
            }

//if the current window contains all characters from t
            while (matched == map.size()) {
                if (minLen > endWindow - start + 1) {
                    //track the smallest valid window found.
                    minLen = endWindow - start + 1;
                    subStr = start;
                }
                //shrinks the window
                char deleted = s.charAt(start++);
                if (map.containsKey(deleted)) {
                    //updating the character counts in the map accordingly.
                    if (map.get(deleted) == 0) matched--;
                    map.put(deleted, map.get(deleted) + 1);
                }
            }
        }
        return minLen > s.length() ? "" : s.substring(subStr, subStr + minLen);
    }
}