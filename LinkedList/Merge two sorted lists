/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        // Create a dummy head node to simplify the merging process
        // This dummy node acts as a placeholder to build the merged list
        ListNode head = new ListNode(0);
        ListNode current = head;

        // Traverse both lists while neither is null
        while (list1 != null && list2 != null) {
            // Compare the current nodes of both lists
            if (list1.val <= list2.val) {
                // If list1's value is smaller or equal, attach it to the merged list
                current.next = list1;
                list1 = list1.next; // Move to the next node in list1
            } else {
                // Otherwise, attach list2's node to the merged list
                current.next = list2;
                list2 = list2.next; // Move to the next node in list2
            }
            current = current.next; // Move the pointer of the merged list forward
        }

        // Attach any remaining nodes from either list1 or list2
        // At this point, at least one of the lists is null
        current.next = (list1 != null) ? list1 : list2;

        // Return the merged list, skipping the dummy head node
        return head.next;
    }
}

/**
 * Space Complexity:
 * - The space complexity is O(1) because we are not using any additional data structures.
 *   We are simply rearranging pointers in the existing nodes.
 *
 * Time Complexity:
 * - The time complexity is O(n + m), where n is the number of nodes in `list1`
 *   and m is the number of nodes in `list2`.
 * - Each node from both lists is processed exactly once, resulting in linear time complexity.
 */
