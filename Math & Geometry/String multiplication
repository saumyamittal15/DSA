class Solution {
    public String multiply(String num1, String num2) {
        // Edge case: if either number is "0", the result is "0"
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }

        // Initialize an array to store the intermediate results
        int m = num1.length(), n = num2.length();
        int[] result = new int[m + n];

        // Perform multiplication digit by digit
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0'); // Multiply digits
                int sum = mul + result[i + j + 1]; // Add to the current position in the result array

                // Update the result array with carry and current digit
                result[i + j + 1] = sum % 10; // Current digit
                result[i + j] += sum / 10;   // Carry
            }
        }

        // Convert the result array to a string
        StringBuilder sb = new StringBuilder();
        for (int num : result) {
            if (!(sb.length() == 0 && num == 0)) { // Skip leading zeros
                sb.append(num);
            }
        }

        return sb.toString(); // Return the final product as a string
    }
}

/*
Space Complexity: O(m + n)
- The result array requires O(m + n) space, where m and n are the lengths of num1 and num2.

Time Complexity: O(m * n)
- Each digit of num1 is multiplied with each digit of num2, resulting in O(m * n) operations.
- Constructing the final string from the result array takes O(m + n).

Overall, this algorithm is efficient for the given constraints.
*/
