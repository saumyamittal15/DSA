class Solution {

    List<String> parenthesis = new ArrayList<>();
    Stack<Character> stack = new Stack<>();

    public List<String> generateParenthesis(int n) {
        backtrack(0,0,n);
        return parenthesis;
    }

    private void backtrack(int openN, int closedN, int n){
        if( openN == closedN && closedN == n){
            StringBuilder sb = new StringBuilder();
            for(Character c : stack){
                sb.append(c);
            }
            parenthesis.add(sb.toString());
        }
        if(openN < n){
            stack.push('(');
            backtrack(openN+1, closedN, n);
            stack.pop();
        }
        if(closedN < openN){
            stack.push(')');
            backtrack(openN, closedN + 1, n);
            stack.pop();
        }

    }
}