class Solution {
    public int carFleet(int target, int[] position, int[] speed) {
        // Edge case: If there is only one car, it forms its own fleet.
        if (position.length == 1) 
            return 1;
        
        // Stack to hold the time it takes for each car to reach the target
        Stack<Double> stack = new Stack<>();
        
        // Create a 2D array to combine positions and speeds of cars
        int[][] combine = new int[position.length][2];
        for (int i = 0; i < position.length; i++) {
            combine[i][0] = position[i];  // First column stores positions
            combine[i][1] = speed[i];     // Second column stores speeds
        }

        // Sort the cars by their positions 
        Arrays.sort(combine, java.util.Comparator.comparingInt(o -> o[0]));
        
        // Iterate over the sorted cars 
        for (int i = combine.length - 1; i >= 0; i--) {
            // Calculate the time it takes for this car to reach the target
            double currentTime = (double) (target - combine[i][0]) / combine[i][1];

            // If the car's time to the target is less than or equal to the car in front of it (on top of the stack),
            // then it will join the same fleet. So, skip this car.
            if (!stack.isEmpty() && currentTime <= stack.peek()) {
                continue;
            } else {
                // Push this car's time to the stack, as it's a new fleet
                stack.push(currentTime);
            }
        }
        
        // The size of the stack represents the number of fleets formed
        return stack.size();
    }
}

/*
Time Complexity:
- Sorting the cars by position: O(n log n)
- Iterating through the cars and performing stack operations: O(n)
Overall Time Complexity: O(n log n)

Space Complexity:
- The combine array that stores positions and speeds: O(n)
- The stack used to store times: O(n)
Overall Space Complexity: O(n)
*/
