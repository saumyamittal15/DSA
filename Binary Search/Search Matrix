public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // Get the number of rows and columns in the matrix
        int ROWS = matrix.length, COLS = matrix[0].length;

        // Define the search range in a 1D representation of the 2D matrix
        int l = 0, r = ROWS * COLS - 1;

        // Perform binary search
        while (l <= r) {
            // Calculate the middle index in the 1D representation
            int m = l + (r - l) / 2;

            // Convert the 1D index back to 2D indices (row and column)
            int row = m / COLS; // Row index
            int col = m % COLS; // Column index

            // Compare the target with the current element
            if (target > matrix[row][col]) {
                // If target is greater, move to the right half
                l = m + 1;
            } else if (target < matrix[row][col]) {
                // If target is smaller, move to the left half
                r = m - 1;
            } else {
                // Target found, return true
                return true;
            }
        }

        // Target not found, return false
        return false;
    }
}

/*
Time Complexity:
- The algorithm performs a binary search on a virtual 1D array representation of the matrix.
- Binary search has a time complexity of O(log(n * m)), where `n` is the number of rows and `m` is the number of columns.
- This is because there are `n * m` elements in total, and binary search divides the search space by half at each step.

Space Complexity:
- The algorithm uses O(1) additional space.
- No extra data structures are used; only a few integer variables are allocated for calc
