class Solution {
    public int search(int[] nums, int target) {

        // Initialize two pointers: left (l) and right (r)
        int l = 0;
        int r = nums.length - 1;

        // Perform binary search while the left pointer is less than or equal to the right pointer
        while (l <= r) {

            // Calculate the middle index
            int mid = (l + r) / 2;

            // Check if the middle element is the target
            if (nums[mid] == target) {
                return mid; // Return the index of the target
            }

            // Check if the left half is sorted
            if (nums[l] <= nums[mid]) {
                // If the target is not in the left sorted half, move to the right half
                if (target > nums[mid] || target < nums[l]) {
                    l = mid + 1;
                } else { // Otherwise, narrow down to the left half
                    r = mid - 1;
                }
            } else { 
                // If the right half is sorted
                if (target < nums[mid] || target > nums[r]) {
                    r = mid - 1; // Narrow down to the left half
                } else {
                    l = mid + 1; // Otherwise, narrow down to the right half
                }
            }
        }

        // If we exit the loop without finding the target, return -1
        return -1;
    }
}

/*
Time Complexity:
- The time complexity of this algorithm is O(log n), where n is the number of elements in the array.
- This is because we are performing a binary search, which repeatedly halves the search space.

Space Complexity:
- The space complexity of this algorithm is O(1).
- We are using only a constant amount of extra space for variables like `l`, `r`, and `mid`.
*/
