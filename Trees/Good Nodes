/**
 * Solution to count the number of "good" nodes in a binary tree.
 * A node is "good" if the path from root to this node has no nodes with a value greater than it.
 * 
 * Time Complexity: O(n) where n is the number of nodes in the tree
 * - We visit each node exactly once during the traversal
 * 
 * Space Complexity: O(h) where h is the height of the tree
 * - The recursive call stack can go as deep as the height of the tree
 * - In worst case (skewed tree), O(n)
 * - In best case (balanced tree), O(log n)
 */
class Solution {
    // Main method that initiates the recursive traversal
    // Starting with a very small initial max value to ensure root is counted
    public int goodNodes(TreeNode root) {
        return helper(root, Integer.MIN_VALUE);
    }

    /**
     * Helper method that recursively traverses the tree and counts good nodes
     * @param root Current node being processed
     * @param max Maximum value seen so far in the path from root to current node
     * @return Count of good nodes in the subtree rooted at 'root'
     */
    public int helper(TreeNode root, int max) {
        // Base case: if node is null, return 0
        if (root == null) return 0;

        // Current node is good if its value is >= max value seen so far
        int res = root.val >= max ? 1 : 0;

        // Recursively process left and right subtrees
        // Pass the larger value between current node's value and previous max
        res += helper(root.left, Math.max(root.val, max));
        res += helper(root.right, Math.max(root.val, max));

        return res;
    }
}
