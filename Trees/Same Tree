/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/**
 * Time Complexity: O(min(n,m)) where n and m are the numbers of nodes in trees p and q respectively
 * - We traverse each node in both trees simultaneously until we find a mismatch or reach the end
 * - We stop as soon as we find the first difference
 * 
 * Space Complexity: O(h) where h is the height of the tree
 * - In worst case (skewed tree), height could be O(n)
 * - In best case (balanced tree), height would be O(log n)
 * - Space is used by the recursive call stack
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // Base case 1: If both nodes are null, trees are identical at this point
        if(p == null && q == null)
            return true;
            
        // Base case 2: If one node is null and other isn't, trees are different
        if(p == null || q == null)
            return false;

        // Check if current nodes have different values
        if(p.val != q.val)
            return false;

        // Recursively check left and right subtrees
        // Both subtrees must be identical for trees to be same
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
