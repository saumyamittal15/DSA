class Solution {
    public int[] countBits(int n) {
        int[] f = new int[n + 1];
        for (int i=1; i<=n; i++) 
            f[i] = f[i >> 1] + (i & 1);
        return f;
    }
}

/**************************** */
/***************************** */

/**
 * Solution to count the number of 1's in binary representations of integers from 0 to n.
 * 
 * Time Complexity: O(n * log(n))
 *   - We iterate through each number from 0 to n.
 *   - For each number, counting the set bits takes O(log(n)) time on average, as it depends on the number of bits in the binary representation.
 * 
 * Space Complexity: O(n)
 *   - We create an array of size n+1 to store the results.
 */
class Solution {
    /**
     * Counts the number of 1's in binary representations for all numbers from 0 to n.
     * 
     * @param n The upper limit of numbers to process.
     * @return An array where each index contains the count of 1's in its binary representation.
     */
    public int[] countBinaryOnes(int n) {
        // Initialize an array to store the count of 1's for each number
        int[] binaryOnesCounts = new int[n + 1];
        
        // Iterate through all numbers from 0 to n
        for (int currentNumber = 0; currentNumber <= n; currentNumber++) {
            // Calculate and store the count of set bits (1's) for the current number
            binaryOnesCounts[currentNumber] = countSetBits(currentNumber);
        }
        
        return binaryOnesCounts;
    }
    
    /**
     * Helper method to count the number of set bits (1's) in a single integer's binary representation.
     * 
     * @param number The integer whose binary representation is analyzed.
     * @return The count of 1's in the binary representation.
     */
    private int countSetBits(int number) {
        int bitsCount = 0;
        
        // Use bit manipulation to count set bits
        while (number != 0) {
            // Remove the least significant set bit and increment the counter
            number &= (number - 1);
            bitsCount++;
        }
        
        return bitsCount;
    }
}
