public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int ans = 0;

        for (int i = 0; i < 32; i++) {
            ans <<= 1;
            ans |= (n & 1);
            n >>= 1;
        }
        return ans;
    }
}

/***********************/
/***********************/
public class BitReversal {
    /**
     * Reverses the bits of a 32-bit unsigned integer.
     * 
     * Time Complexity: O(1)
     * - The method always iterates exactly 32 times, regardless of input.
     * - Each iteration performs constant-time bitwise operations.
     * - The number of iterations is fixed and does not depend on input value.
     * 
     * Space Complexity: O(1)
     * - Uses only two integer variables (result and n).
     * - Additional space used is constant and does not grow with input.
     * - No extra data structures are created during the process.
     * 
     * @param n The input 32-bit integer to be bit-reversed.
     * @return The bit-reversed integer.
     */
    public static int reverseBits(int n) {
        // Initialize the result to store the reversed bits
        int result = 0;
        
        // Iterate through all 32 bits
        for (int i = 0; i < 32; i++) {
            // Left shift the result to make space for the next bit
            result = (result << 1) | (n & 1);
            
            // Right shift the input to process next bit
            n = n >>> 1;
        }
        
        return result;
    }
    
}
