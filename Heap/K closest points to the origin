class Solution {
    public int[][] kClosest(int[][] points, int k) {
        // Create a max-heap (priority queue) to store points based on their distance from the origin.
        // The comparator ensures that points with larger distances are at the top of the heap.
        PriorityQueue<int[]> q = new PriorityQueue<>((a, b) ->
            Integer.compare(
                (b[0] * b[0] + b[1] * b[1]), // Distance of point b from origin
                (a[0] * a[0] + a[1] * a[1])  // Distance of point a from origin
            )
        );
        
        // Iterate through all the points
        for (int[] point : points) {
            // Add the current point to the priority queue
            q.add(point);

            // If the size of the heap exceeds k, remove the farthest point
            if (q.size() > k) {
                q.remove();
            }
        }

        // Prepare the result array to store the k closest points
        int[][] ans = new int[k][2];
        for (int i = 0; i < k; i++) {
            // Poll the closest point from the heap and add it to the result array
            int[] cur = q.poll();
            ans[i][0] = cur[0];
            ans[i][1] = cur[1];
        }
        
        return ans;
    }
}

/*
Time Complexity:
1. Adding a point to the priority queue takes O(log k), where k is the size of the heap.
   Since we iterate through all n points, this step takes O(n log k).
2. Removing elements from the priority queue also takes O(log k), but this is bounded by n iterations.

Overall time complexity: O(n log k).

Space Complexity:
1. The space used by the priority queue is O(k), as it stores at most k elements at any time.
2. The result array `ans` takes O(k) space.

Overall space complexity: O(k).
*/
