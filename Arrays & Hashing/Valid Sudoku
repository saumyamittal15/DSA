class Solution {
    public boolean isValidSudoku(char[][] sudoku) {
        Set<Character> rowSet = null;
        Set<Character> colSet = null;

      for(int i = 0 ; i < 9; i++){

          rowSet = new HashSet<>();
          colSet = new HashSet<>();

          for(int j = 0 ; j < 9 ; j++){
            char r = sudoku[i][j];
            char c = sudoku[j][i];

            if(r != '.'){
                if(rowSet.contains(r))
                    return false;
                else
                    rowSet.add(r);
            }

            if(c != '.'){
                if(colSet.contains(c))
                    return false;
                else
                    colSet.add(c);
            }
          }
      }

      for(int i = 0; i < 9 ; i = i+3){
          for(int j = 0; j < 9 ; j = j+3){
              if(!checkBlock(i,j,sudoku))
                  return false;
          }
      }
      return true;
    }

    private static boolean checkBlock(int i, int j, char[][] sudoku) {

        Set<Character> block = new HashSet<>();
        int rows = i+3;
        int columns = j+3;

        for(int r = i ; r < rows; r++){
            for(int c = j ; c < columns; c++){
                if(sudoku[r][c] == '.')
                    continue;
                if(block.contains(sudoku[r][c]))
                    return false;
                block.add(sudoku[r][c]);
            }
        }
        return true;
    }
}