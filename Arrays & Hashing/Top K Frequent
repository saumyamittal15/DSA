class Solution {
    public int[] topKFrequent(int[] nums, int k) {

        /**Soln 1 
        Map<Integer, Integer> freqMap = new HashMap<>();

        //frequency map
        for(int num : nums){
            freqMap.put(num, freqMap.getOrDefault(num,0) + 1);
        }

        //store a pair of freq and number
        Queue<int[]> heap = new PriorityQueue<>((a,b) -> a[0] - b[0]);

        for(Map.Entry<Integer, Integer> entry : freqMap.entrySet()){
            heap.offer(new int[]{entry.getValue(), entry.getKey()});

            //number with least freq (at the root) gets removed
            if(heap.size() > k){
                heap.poll();
            }
        }

        int[] result = new int[k];
        for(int i = 0 ; i < result.length; i++){
            result[i] = heap.poll()[1];
        }

        return result;
        **/


        /**Solution 2  : Bucket Sort*/

        if(nums.length == 0) return new int[0];

        Map<Integer, Integer> freqMap = new HashMap<>();

        //frequency map
        for(int num : nums){
            freqMap.put(num, freqMap.getOrDefault(num,0) + 1);
        }

        //use map's keySet to fill the bucket frequency. 
        List<Integer>[] bucket = new List[nums.length + 1];
        for(Map.Entry<Integer, Integer> entry : freqMap.entrySet()){
            int frequency = entry.getValue();
            if(bucket[frequency] == null){
                bucket[frequency] = new ArrayList<>();
            }
            bucket[frequency].add(entry.getKey());
        }

        int[] output = new int[k];
        int index = 0;
        for(int i = bucket.length - 1 ; i >=0 && index < k; i--){
            if(bucket[i] != null){
                for(Integer num : bucket[i]){
                    output[index++] = num;
                }
            }
        }

        return output;

    }
}