public List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {
    // Array to mark visited nodes
    int[] vis = new int[V];
    // Array to keep track of nodes in the current path (to detect cycles)
    int[] pathVis = new int[V];
    // Array to check if a node is safe (1 if safe, 0 otherwise)
    int[] check = new int[V];

    // Perform DFS for all nodes
    for (int i = 0; i < V; i++) {
        if (vis[i] == 0) { // If the node is not visited
            dfs(i, adj, vis, pathVis, check);
        }
    }

    // Collect all safe nodes
    List<Integer> safeNodes = new ArrayList<>();
    for (int i = 0; i < V; i++) {
        if (check[i] == 1) { // If the node is marked as safe
            safeNodes.add(i);
        }
    }

    return safeNodes;
}

private boolean dfs(int node, List<List<Integer>> adj, int[] vis, int[] pathVis, int[] check) {
    vis[node] = 1; // Mark the current node as visited
    pathVis[node] = 1; // Mark the current node as part of the current path
    check[node] = 1; // Initially assume the node is safe

    // Traverse all adjacent nodes
    for (int i : adj.get(node)) {
        if (vis[i] == 0) { // If the adjacent node is not visited
            if (dfs(i, adj, vis, pathVis, check)) { // Recursive DFS call
                return true; // Cycle detected
            }
        } else if (pathVis[i] == 1) { // If the adjacent node is already in the current path
            return true; // Cycle detected
        }
    }

    // If no cycle is detected, mark the node as safe and remove it from the current path
    check[node] = 1;
    pathVis[node] = 0;
    return false; // No cycle detected for this node
}

/*
Time Complexity:
- The algorithm performs a Depth First Search (DFS) on each node once. 
- For a graph with V vertices and E edges, the total time complexity is O(V + E), 
  where V is the number of vertices and E is the number of edges.

Space Complexity:
- The space complexity is O(V) due to the use of arrays `vis`, `pathVis`, and `check`, each of size V.
- The recursion stack in DFS can also go up to O(V) in the worst case.
- Therefore, the overall space complexity is O(V).
*/
